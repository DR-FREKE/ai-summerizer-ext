// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql" // for prod, this will be postgres
//   url      = env("DATABASE_URL")
// }

// production db connection
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Article {
  id       Int       @id @default(autoincrement())
  video_id String    @unique
  ratings  Ratings[]
  video    Video     @relation(fields: [video_id], references: [video_id])

  @@index([id])
  @@index([video_id])
}

model Video {
  video_id            String             @id @unique
  video_name          String
  general_topic       String
  slug                String             @unique
  summary             String
  video_thumbnail     Thumbnail[]
  video_url           String?
  category            String
  timestamp_summary   TimestampSummary[]
  insights            Insight[]
  transcript          Transcripts[]
  question_and_answer QuestionAnswer[]
  updated_at          DateTime           @updatedAt
  created_at          DateTime           @default(now())
  Article             Article?

  @@unique([video_name])
  @@index([video_id, video_name])
  @@index([created_at])
}

model Thumbnail {
  id            Int    @id @default(autoincrement())
  video_id      String
  thumbnail_url String
  video         Video  @relation(fields: [video_id], references: [video_id])

  @@index([video_id])
}

model Transcripts {
  id       Int                    @id @default(autoincrement())
  content  String
  metadata Json?
  video_id String
  vector   Unsupported("vector")?
  video    Video                  @relation(fields: [video_id], references: [video_id])

  @@index([video_id])
}

model TimestampSummary {
  id         String     @id @default(cuid())
  icon       String
  start_time Int
  tldr       String
  video_id   String
  key_ideas  KeyIdeas[]
  video      Video      @relation(fields: [video_id], references: [video_id])

  @@index([id])
  @@index([video_id])
}

model KeyIdeas {
  id           Int              @id @default(autoincrement())
  idea         String?
  timestamp_id String
  timestamp    TimestampSummary @relation(fields: [timestamp_id], references: [id])

  @@index([timestamp_id])
}

model Insight {
  id       String         @id @default(cuid())
  name     String
  points   InsightPoint[]
  video_id String
  video    Video          @relation(fields: [video_id], references: [video_id])

  @@index([video_id])
}

model InsightPoint {
  id         String  @id @default(cuid())
  icon       String
  title      String
  insight_id String
  insight    Insight @relation(fields: [insight_id], references: [id])

  @@index([insight_id])
}

// create model for rating
model Ratings {
  id         Int     @id @default(autoincrement())
  rate       Int
  article_id Int
  video      Article @relation(fields: [article_id], references: [id])

  @@index([article_id])
}

model QuestionAnswer {
  id       String @id @default(cuid())
  question String
  answer   String
  video_id String
  Video    Video  @relation(fields: [video_id], references: [video_id])

  @@index([video_id])
}

// create model for subscription and plan
model Subscription {
  id              String   @id @default(cuid())
  user_id         String
  subs_start_date DateTime
  subs_end_date   DateTime
  status          String   @default("inactive")
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}
